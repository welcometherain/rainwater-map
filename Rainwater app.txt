<!DOCTYPE html>
<html>

<head>
    <title>Rainwater Capture Map</title>
    <style>
        #map {
            height: 600px;
            width: 100%;
        }
        #area,
        #capture,
        #gallonsPerInch {
            font-weight: bold;
        }
        #calculate {
            background-color: pink;
            color: black;
            font-size: 1.2em;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        #results-space {
            margin-bottom: 20px;
        }
        #areasList {
            margin-top: 10px;
        }
    </style>

    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/0.4.14/leaflet.draw.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/0.4.14/leaflet.draw.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@turf/turf@6/turf.min.js"></script>
</head>

<body>
    <div id="map"></div>
    <p>Enter Address: <input type="text" id="addressInput">
        <button id="searchAddress">Search</button>
    </p>
    <p>
        Enter Your Annual Rainfall (in inches):
        <input type="number" id="rainfall" />
        <br />
        <a href="https://precip.ai/rainfall-totals/zipcode/" target="_blank">
            Find Rainfall by Zip Code
        </a>
    </p>
    <button id="calculate">Calculate</button>
    <div id="results-space"></div>
    <p>Area (square feet): <span id="area"></span></p>
    <p>Potential Annual Rainwater Harvesting in Gallons: <span id="capture"></span></p>
    <p>Gallons of Rainwater per Inch of Rain: <span id="gallonsPerInch"></span></p>
    <div id="areasList"></div>

    <script>
        const map = L.map('map').setView([32.7157, -117.1611], 11);

        // Satellite imagery base layer
        L.tileLayer(
            'https://api.mapbox.com/styles/v1/mapbox/satellite-v9/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoidGhlcGVybWFjdWx0dXJlbGFiIiwiYSI6ImNtOGs5d2Y5bzBrdGkyanB0aXpsd254a3YifQ.5pF_SIB5dJQGQy-Q6jTExg', {
                attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
                maxZoom: 21,
                id: 'mapbox/satellite-v9',
                tileSize: 512,
                zoomOffset: -1,
            }).addTo(map);

        // Labels layer
        L.tileLayer(
            'https://api.mapbox.com/styles/v1/mapbox/streets-v11/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoidGhlcGVybWFjdWx0dXJlbGFiIiwiYSI6ImNtOGs5d2Y5bzBrdGkyanB0aXpsd254a3YifQ.5pF_SIB5dJQGQy-Q6jTExg', {
                attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
                maxZoom: 21,
                id: 'mapbox/streets-v11',
                tileSize: 512,
                zoomOffset: -1,
                pane: 'labels'
            }).addTo(map);

        map.createPane('labels');
        map.getPane('labels').style.zIndex = 1000;
        map.getPane('labels').style.pointerEvents = 'none';
        map.getPane('labels').style.zIndex = '1000 !important';

        let drawnPolygons = [];
        let drawnItems = new L.FeatureGroup().addTo(map);

        console.log("Creating drawControl");
        let drawControl = new L.Control.Draw({
            edit: {
                featureGroup: drawnItems
            },
            draw: {
                circle: false,
                marker: false,
                circlemarker: false,
                polyline: false,
            },
        });

        console.log("Adding drawControl to map");
        map.addControl(drawControl);

        map.on(L.Draw.Event.CREATED, function(event) {
            console.log("L.Draw.Event.CREATED triggered");
            let layer = event.layer;
            let polygonName = prompt("Enter a name for this polygon:");
            if (polygonName) {
                drawnPolygons.push({
                    layer: layer,
                    name: polygonName
                });
                drawnItems.addLayer(layer);
                let geojson = layer.toGeoJSON();
                let areaMeters = turf.area(geojson);
                let areaFeet = Math.round(areaMeters * 10.7639);

                let areasList = document.getElementById('areasList');
                areasList.innerHTML += `<p>${polygonName}: ${areaFeet.toLocaleString()} sq ft</p>`;

                let totalArea = drawnPolygons.reduce((sum, polygon) => {
                    let geojson = polygon.layer.toGeoJSON();
                    let areaMeters = turf.area(geojson);
                    return sum + (areaMeters * 10.7639);
                }, 0);
                document.getElementById('area').textContent = Math.round(totalArea).toLocaleString();
            } else {
                alert("Polygon not saved. Please provide a name.");
            }
        });

        document.getElementById('calculate').addEventListener('click', function() {
            const rainfall = parseFloat(document.getElementById('rainfall').value);
            const area = parseFloat(document.getElementById('area').textContent.replace(/,/g, ''));

            if (!isNaN(rainfall) && !isNaN(area)) {
                const capture = Math.round(area * (rainfall / 12) * 7.48052);
                const gallonsPerInch = Math.round(capture / rainfall);
                document.getElementById('capture').textContent = capture.toLocaleString();
                document.getElementById('gallonsPerInch').textContent = gallonsPerInch.toLocaleString();
            } else {
                alert('Please enter valid rainfall and area values.');
            }
        });

        document.getElementById('searchAddress').addEventListener('click', function() {
            const address = document.getElementById('addressInput').value;
            const accessToken = 'pk.eyJ1IjoidGhlcGVybWFjdWx0dXJlbGFiIiwiYSI6ImNtOGs5d2Y5bzBrdGkyanB0aXpsd254a3YifQ.5pF_SIB5dJQGQy-Q6jTExg';

            fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(address)}.json?access_token=${accessToken}`)
                .then(response => response.json())
                .then(data => {
                    if (data.features && data.features.length > 0) {
                        const coordinates = data.features[0].center;
                        map.setView([coordinates[1], coordinates[0]], 16);
                    } else {
                        alert('Address not found.');
                    }
                })
                .catch(error => {
                    console.error('Error geocoding address:', error);
                    alert('An error occurred.');
                });
        });
    </script>
</body>

</html>